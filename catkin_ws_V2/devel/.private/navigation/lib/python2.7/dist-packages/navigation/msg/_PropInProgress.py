# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from navigation/PropInProgress.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geographic_msgs.msg

class PropInProgress(genpy.Message):
  _md5sum = "d6c33540b8c16df4f5cfffc348148909"
  _type = "navigation/PropInProgress"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string prop_type
float32 theta_1
float32 theta_2
float32 closest_pnt_dist
float32 closest_pnt_angle
geographic_msgs/GeoPoint prop_coords


================================================================================
MSG: geographic_msgs/GeoPoint
# Geographic point, using the WGS 84 reference ellipsoid.

# Latitude [degrees]. Positive is north of equator; negative is south
# (-90 <= latitude <= +90).
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or
# +90, and longitude is irrelevant, but must be in range.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
float64 altitude
"""
  __slots__ = ['prop_type','theta_1','theta_2','closest_pnt_dist','closest_pnt_angle','prop_coords']
  _slot_types = ['string','float32','float32','float32','float32','geographic_msgs/GeoPoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prop_type,theta_1,theta_2,closest_pnt_dist,closest_pnt_angle,prop_coords

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PropInProgress, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.prop_type is None:
        self.prop_type = ''
      if self.theta_1 is None:
        self.theta_1 = 0.
      if self.theta_2 is None:
        self.theta_2 = 0.
      if self.closest_pnt_dist is None:
        self.closest_pnt_dist = 0.
      if self.closest_pnt_angle is None:
        self.closest_pnt_angle = 0.
      if self.prop_coords is None:
        self.prop_coords = geographic_msgs.msg.GeoPoint()
    else:
      self.prop_type = ''
      self.theta_1 = 0.
      self.theta_2 = 0.
      self.closest_pnt_dist = 0.
      self.closest_pnt_angle = 0.
      self.prop_coords = geographic_msgs.msg.GeoPoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.prop_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f3d().pack(_x.theta_1, _x.theta_2, _x.closest_pnt_dist, _x.closest_pnt_angle, _x.prop_coords.latitude, _x.prop_coords.longitude, _x.prop_coords.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.prop_coords is None:
        self.prop_coords = geographic_msgs.msg.GeoPoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prop_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prop_type = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.theta_1, _x.theta_2, _x.closest_pnt_dist, _x.closest_pnt_angle, _x.prop_coords.latitude, _x.prop_coords.longitude, _x.prop_coords.altitude,) = _get_struct_4f3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.prop_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f3d().pack(_x.theta_1, _x.theta_2, _x.closest_pnt_dist, _x.closest_pnt_angle, _x.prop_coords.latitude, _x.prop_coords.longitude, _x.prop_coords.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.prop_coords is None:
        self.prop_coords = geographic_msgs.msg.GeoPoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prop_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prop_type = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.theta_1, _x.theta_2, _x.closest_pnt_dist, _x.closest_pnt_angle, _x.prop_coords.latitude, _x.prop_coords.longitude, _x.prop_coords.altitude,) = _get_struct_4f3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f3d = None
def _get_struct_4f3d():
    global _struct_4f3d
    if _struct_4f3d is None:
        _struct_4f3d = struct.Struct("<4f3d")
    return _struct_4f3d
