# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from navigation/PropArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geographic_msgs.msg
import navigation.msg

class PropArray(genpy.Message):
  _md5sum = "683038ca6db71a08ccd7ab7ebcf3ff8f"
  _type = "navigation/PropArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Prop[] props

================================================================================
MSG: navigation/Prop
string prop_type
geographic_msgs/GeoPoint prop_coords
GeoPointRange prop_coord_range
================================================================================
MSG: geographic_msgs/GeoPoint
# Geographic point, using the WGS 84 reference ellipsoid.

# Latitude [degrees]. Positive is north of equator; negative is south
# (-90 <= latitude <= +90).
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or
# +90, and longitude is irrelevant, but must be in range.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
float64 altitude

================================================================================
MSG: navigation/GeoPointRange
float64 min_latitude
float64 max_latitude
float64 min_longitude
float64 max_longitude
float64 min_altitude
float64 max_altitude 
"""
  __slots__ = ['props']
  _slot_types = ['navigation/Prop[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       props

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PropArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.props is None:
        self.props = []
    else:
      self.props = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.props)
      buff.write(_struct_I.pack(length))
      for val1 in self.props:
        _x = val1.prop_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.prop_coords
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.latitude, _x.longitude, _x.altitude))
        _v2 = val1.prop_coord_range
        _x = _v2
        buff.write(_get_struct_6d().pack(_x.min_latitude, _x.max_latitude, _x.min_longitude, _x.max_longitude, _x.min_altitude, _x.max_altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.props is None:
        self.props = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.props = []
      for i in range(0, length):
        val1 = navigation.msg.Prop()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.prop_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.prop_type = str[start:end]
        _v3 = val1.prop_coords
        _x = _v3
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.prop_coord_range
        _x = _v4
        start = end
        end += 48
        (_x.min_latitude, _x.max_latitude, _x.min_longitude, _x.max_longitude, _x.min_altitude, _x.max_altitude,) = _get_struct_6d().unpack(str[start:end])
        self.props.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.props)
      buff.write(_struct_I.pack(length))
      for val1 in self.props:
        _x = val1.prop_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = val1.prop_coords
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.latitude, _x.longitude, _x.altitude))
        _v6 = val1.prop_coord_range
        _x = _v6
        buff.write(_get_struct_6d().pack(_x.min_latitude, _x.max_latitude, _x.min_longitude, _x.max_longitude, _x.min_altitude, _x.max_altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.props is None:
        self.props = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.props = []
      for i in range(0, length):
        val1 = navigation.msg.Prop()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.prop_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.prop_type = str[start:end]
        _v7 = val1.prop_coords
        _x = _v7
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.prop_coord_range
        _x = _v8
        start = end
        end += 48
        (_x.min_latitude, _x.max_latitude, _x.min_longitude, _x.max_longitude, _x.min_altitude, _x.max_altitude,) = _get_struct_6d().unpack(str[start:end])
        self.props.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
