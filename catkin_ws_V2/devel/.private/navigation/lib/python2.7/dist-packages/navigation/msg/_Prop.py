# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from navigation/Prop.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geographic_msgs.msg
import navigation.msg

class Prop(genpy.Message):
  _md5sum = "179b91140665e240f19504a5815eac9f"
  _type = "navigation/Prop"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string prop_type
geographic_msgs/GeoPoint prop_coords
GeoPointRange prop_coord_range
================================================================================
MSG: geographic_msgs/GeoPoint
# Geographic point, using the WGS 84 reference ellipsoid.

# Latitude [degrees]. Positive is north of equator; negative is south
# (-90 <= latitude <= +90).
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or
# +90, and longitude is irrelevant, but must be in range.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
float64 altitude

================================================================================
MSG: navigation/GeoPointRange
float64 min_latitude
float64 max_latitude
float64 min_longitude
float64 max_longitude
float64 min_altitude
float64 max_altitude 
"""
  __slots__ = ['prop_type','prop_coords','prop_coord_range']
  _slot_types = ['string','geographic_msgs/GeoPoint','navigation/GeoPointRange']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prop_type,prop_coords,prop_coord_range

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Prop, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.prop_type is None:
        self.prop_type = ''
      if self.prop_coords is None:
        self.prop_coords = geographic_msgs.msg.GeoPoint()
      if self.prop_coord_range is None:
        self.prop_coord_range = navigation.msg.GeoPointRange()
    else:
      self.prop_type = ''
      self.prop_coords = geographic_msgs.msg.GeoPoint()
      self.prop_coord_range = navigation.msg.GeoPointRange()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.prop_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.prop_coords.latitude, _x.prop_coords.longitude, _x.prop_coords.altitude, _x.prop_coord_range.min_latitude, _x.prop_coord_range.max_latitude, _x.prop_coord_range.min_longitude, _x.prop_coord_range.max_longitude, _x.prop_coord_range.min_altitude, _x.prop_coord_range.max_altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.prop_coords is None:
        self.prop_coords = geographic_msgs.msg.GeoPoint()
      if self.prop_coord_range is None:
        self.prop_coord_range = navigation.msg.GeoPointRange()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prop_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prop_type = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.prop_coords.latitude, _x.prop_coords.longitude, _x.prop_coords.altitude, _x.prop_coord_range.min_latitude, _x.prop_coord_range.max_latitude, _x.prop_coord_range.min_longitude, _x.prop_coord_range.max_longitude, _x.prop_coord_range.min_altitude, _x.prop_coord_range.max_altitude,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.prop_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.prop_coords.latitude, _x.prop_coords.longitude, _x.prop_coords.altitude, _x.prop_coord_range.min_latitude, _x.prop_coord_range.max_latitude, _x.prop_coord_range.min_longitude, _x.prop_coord_range.max_longitude, _x.prop_coord_range.min_altitude, _x.prop_coord_range.max_altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.prop_coords is None:
        self.prop_coords = geographic_msgs.msg.GeoPoint()
      if self.prop_coord_range is None:
        self.prop_coord_range = navigation.msg.GeoPointRange()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prop_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prop_type = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.prop_coords.latitude, _x.prop_coords.longitude, _x.prop_coords.altitude, _x.prop_coord_range.min_latitude, _x.prop_coord_range.max_latitude, _x.prop_coord_range.min_longitude, _x.prop_coord_range.max_longitude, _x.prop_coord_range.min_altitude, _x.prop_coord_range.max_altitude,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
