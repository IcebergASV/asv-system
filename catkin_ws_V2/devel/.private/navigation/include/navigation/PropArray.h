// Generated by gencpp from file navigation/PropArray.msg
// DO NOT EDIT!


#ifndef NAVIGATION_MESSAGE_PROPARRAY_H
#define NAVIGATION_MESSAGE_PROPARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <navigation/Prop.h>

namespace navigation
{
template <class ContainerAllocator>
struct PropArray_
{
  typedef PropArray_<ContainerAllocator> Type;

  PropArray_()
    : props()  {
    }
  PropArray_(const ContainerAllocator& _alloc)
    : props(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::navigation::Prop_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::navigation::Prop_<ContainerAllocator> >> _props_type;
  _props_type props;





  typedef boost::shared_ptr< ::navigation::PropArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation::PropArray_<ContainerAllocator> const> ConstPtr;

}; // struct PropArray_

typedef ::navigation::PropArray_<std::allocator<void> > PropArray;

typedef boost::shared_ptr< ::navigation::PropArray > PropArrayPtr;
typedef boost::shared_ptr< ::navigation::PropArray const> PropArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation::PropArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation::PropArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation::PropArray_<ContainerAllocator1> & lhs, const ::navigation::PropArray_<ContainerAllocator2> & rhs)
{
  return lhs.props == rhs.props;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation::PropArray_<ContainerAllocator1> & lhs, const ::navigation::PropArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::navigation::PropArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::PropArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::PropArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::PropArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::PropArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::PropArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation::PropArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "683038ca6db71a08ccd7ab7ebcf3ff8f";
  }

  static const char* value(const ::navigation::PropArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x683038ca6db71a08ULL;
  static const uint64_t static_value2 = 0xccd7ab7ebcf3ff8fULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation::PropArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation/PropArray";
  }

  static const char* value(const ::navigation::PropArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation::PropArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Prop[] props\n"
"\n"
"================================================================================\n"
"MSG: navigation/Prop\n"
"string prop_type\n"
"geographic_msgs/GeoPoint prop_coords\n"
"GeoPointRange prop_coord_range\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
"\n"
"================================================================================\n"
"MSG: navigation/GeoPointRange\n"
"float64 min_latitude\n"
"float64 max_latitude\n"
"float64 min_longitude\n"
"float64 max_longitude\n"
"float64 min_altitude\n"
"float64 max_altitude \n"
;
  }

  static const char* value(const ::navigation::PropArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation::PropArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.props);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PropArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation::PropArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation::PropArray_<ContainerAllocator>& v)
  {
    s << indent << "props[]" << std::endl;
    for (size_t i = 0; i < v.props.size(); ++i)
    {
      s << indent << "  props[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::navigation::Prop_<ContainerAllocator> >::stream(s, indent + "    ", v.props[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_MESSAGE_PROPARRAY_H
