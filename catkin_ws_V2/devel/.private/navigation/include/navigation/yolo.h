// Generated by gencpp from file navigation/yolo.msg
// DO NOT EDIT!


#ifndef NAVIGATION_MESSAGE_YOLO_H
#define NAVIGATION_MESSAGE_YOLO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation
{
template <class ContainerAllocator>
struct yolo_
{
  typedef yolo_<ContainerAllocator> Type;

  yolo_()
    : label()
    , probability(0.0)
    , xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)  {
    }
  yolo_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , probability(0.0)
    , xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef float _probability_type;
  _probability_type probability;

   typedef float _xmin_type;
  _xmin_type xmin;

   typedef float _xmax_type;
  _xmax_type xmax;

   typedef float _ymin_type;
  _ymin_type ymin;

   typedef float _ymax_type;
  _ymax_type ymax;





  typedef boost::shared_ptr< ::navigation::yolo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation::yolo_<ContainerAllocator> const> ConstPtr;

}; // struct yolo_

typedef ::navigation::yolo_<std::allocator<void> > yolo;

typedef boost::shared_ptr< ::navigation::yolo > yoloPtr;
typedef boost::shared_ptr< ::navigation::yolo const> yoloConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation::yolo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation::yolo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation::yolo_<ContainerAllocator1> & lhs, const ::navigation::yolo_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.probability == rhs.probability &&
    lhs.xmin == rhs.xmin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymin == rhs.ymin &&
    lhs.ymax == rhs.ymax;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation::yolo_<ContainerAllocator1> & lhs, const ::navigation::yolo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::navigation::yolo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::yolo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::yolo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::yolo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::yolo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::yolo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation::yolo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7d1c0fc76c1db7be4eba6eb5e32d5ef";
  }

  static const char* value(const ::navigation::yolo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7d1c0fc76c1db7bULL;
  static const uint64_t static_value2 = 0xe4eba6eb5e32d5efULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation::yolo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation/yolo";
  }

  static const char* value(const ::navigation::yolo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation::yolo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n"
"float32 probability\n"
"float32 xmin\n"
"float32 xmax\n"
"float32 ymin\n"
"float32 ymax\n"
;
  }

  static const char* value(const ::navigation::yolo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation::yolo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.probability);
      stream.next(m.xmin);
      stream.next(m.xmax);
      stream.next(m.ymin);
      stream.next(m.ymax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yolo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation::yolo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation::yolo_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
    s << indent << "xmin: ";
    Printer<float>::stream(s, indent + "  ", v.xmin);
    s << indent << "xmax: ";
    Printer<float>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymin: ";
    Printer<float>::stream(s, indent + "  ", v.ymin);
    s << indent << "ymax: ";
    Printer<float>::stream(s, indent + "  ", v.ymax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_MESSAGE_YOLO_H
